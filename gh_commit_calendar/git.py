import subprocess
from datetime import datetime
from pathlib import Path


def _run_shell_command(cmd: str):
    return subprocess.run(cmd, shell=True, capture_output=True)


def is_repo(repo: Path):
    proc = _run_shell_command(
        f'cd "{repo.resolve()}" && '
        + f'git status',
    )
    return proc.returncode == 0


README_CONTENT = """
# This repository was created automatically by [\`gh-commit-calendar\`](https://github.com/nj-vs-vh/gh-commit-calendar)

It containes many commits spread across time to create some image on contributions calendar on owners' GitHub page.
"""


def commit_on_datetime(d: datetime, repo: Path, add_readme: bool = False):
    dummy_filename = "autogenerated_commits"
    _run_shell_command(
        f'cd "{repo.resolve()}" && '
        + f'touch {dummy_filename} && '
        + f'echo 1 >> {dummy_filename} && '
        + (f'echo "{README_CONTENT}" > README.md && ' if add_readme else '')
        + f'git add . &&'
        + f'export GIT_COMMITTER_DATE={d.isoformat()} && '
        + f'git commit -m "auto-committed by create_commit_on_date" --date {d.isoformat()}',
    )


def init(repo: Path):
    if not is_repo(repo):
        _run_shell_command(
            f'cd "{repo.resolve()}" && '
            + f'git init',
        )


def push(repo: Path, remote_url: str):
    _run_shell_command(
        f'cd "{repo.resolve()}" && '
        + f'git remote add origin {remote_url} && '
        + f"git branch -M main && "
        + f"git push -u origin main --force"
    )
